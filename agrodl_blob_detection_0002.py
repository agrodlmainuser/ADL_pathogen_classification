# -*- coding: utf-8 -*-
"""AgroDL_blob_detection_0002.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RmrM7Ggb3p0C6ylpBt5DTAZTASbFZWnB

# Import Dependencies
"""

import matplotlib.pyplot as plt
import os
import cv2
import uuid
import numpy as np 
import pandas as pd 
from google.colab.patches import cv2_imshow
from PIL import Image





BLOBS_PATH = os.path.join('/content/drive/MyDrive/Agroml/AgroML_Data/Diseases/blobs/Train', 'Pepper___bell___Bacterial_spot' )

IMAGE_PATH = '/content/drive/MyDrive/Agroml/AgroML_Data/Diseases/original/Train/Pepper___bell___Bacterial_spot'

BLOB_OUTPUT = os.path.join('/content/drive/MyDrive/Agroml/AgroML_Data/Diseases/Train', 'original_image_blob_pepper___bell___Bacterial_spot' )

os.makedirs(BLOBS_PATH)

os.makedirs(BLOB_OUTPUT)

#FUZZY_PATH = '/content/drive/MyDrive/Agroml/AgroML_Data/Diseases/Train/fuzzy_pepper___bell___Bacterial_spot'

#os.makedirs(FUZZY_PATH)

"""**Fuzzy Logic Function**"""

def fuzzy_logic(img):

  for i in range(img.shape[0]):
    for j in range(img.shape[1]):
      pixel = img[i,j]
      if pixel[0] > pixel[1] > pixel[2] and  230 > pixel[0] > 75 and 75 > abs(pixel[1]-pixel[2]) > 17 :
        #continue 
        img[i,j,0] = 255
        img[i,j,1] = 255
        img[i,j,2] = 255
      else:
        img[i,j,0] = 0
        img[i,j,1] = 0
        img[i,j,2] = 0
  
  return img

"""**Blob Detection Function**

This Function takes an input of images directory and preforms blob detection on all images, with the fuzzy logic included.
This function outputs a new images directory containing all new images(binary) with blobs.
"""

def blob_detection(input_path, output_path):

  ''' input_path = original images directory 
      output_path = output directory for all blob detections
  '''
  # input_path = original images directory 
  # output_path = output directory for all blob detections

  # Looping through the directory we want to apply blob detection on
  for i in os.listdir(input_path):

    read_img = cv2.imread(f'{input_path}/{i}')
    
    img_rgb = cv2.cvtColor(read_img, cv2.COLOR_BGR2RGB)

    # Applying Fuzzy Logic for "brownness" on the image
    fuzzy = fuzzy_logic(img_rgb)

    # Setting blob detections parameters
    params = cv2.SimpleBlobDetector_Params()
    params.filterByConvexity=False
    params.filterByColor = False
    params.filterByArea = True
    params.minArea = 20
    #params.filterByCircularity = True
    #params.minCircularity = 0.1
    #params.filterByInertia = True
    #params.maxInertiaRatio = 0.9
    #params.minInertiaRatio = 0.001
    

    # Create a detector object
    detector = cv2.SimpleBlobDetector_create(params)
    # Make detections
    keypoints = detector.detect(fuzzy)
    # Draw a circle around the blob
    blank = np.zeros((1,1))
    im_with_keypoints = cv2.drawKeypoints(fuzzy, keypoints, blank ,(0,0,255), cv2.DRAW_MATCHES_FLAGS_DRAW_RICH_KEYPOINTS)  

    # Extracting blobs coordinates
    keypoints_lst = []
    sec_lst =[]
    din_lst = []
    for j in range(len(keypoints)):

      x = keypoints[j].pt[0] #j is the index of the blob you want to get the position
      y = keypoints[j].pt[1]
      s = keypoints[j].size
      keypoints_lst.append(x)
      keypoints_lst.append(y)
      keypoints_lst.append(s)

    for count,blob in enumerate(keypoints_lst):
      count += 1
      din_lst.append(blob)
      if count%3 == 0:
        sec_lst.append(din_lst)
        din_lst = []


    # Crooping the images and resizing
    for coord in sec_lst:
      
      x_cent = round(coord[0])
      y_cent = round(coord[1])
      diameter = 64
      centroide = [x_cent,  y_cent]

      xmin = x_cent-diameter/2
      ymin = y_cent-diameter/2
      xmax = xmin+ diameter
      ymax = ymin+ diameter
      
      im = Image.open(f'{input_path}/{i}')
      im1 = im.crop((xmin, ymin, xmax, ymax))
      #dim = (64, 64)
      #resized = cv2.resize(np.array(im1), dim, interpolation = cv2.INTER_AREA)
      rgb = cv2.cvtColor(np.array(im1), cv2.COLOR_BGR2RGB)

      # Saving images to new directory
      img_name = os.path.join(output_path, 'blob_{}.png'.format(uuid.uuid1()))
      cv2.imwrite(img_name, rgb)


  return keypoints

def blob_original_image(input_path, output_path):

  ''' input_path = original images directory 
      output_path = output directory for all blob detections
  '''
  # input_path = original images directory 
  # output_path = output directory for all blob detections

  # Looping through the directory we want to apply blob detection on
  for i in os.listdir(input_path):

    read_img = cv2.imread(f'{input_path}/{i}')
    
    img_rgb = cv2.cvtColor(read_img, cv2.COLOR_BGR2RGB)

    # Applying Fuzzy Logic for "brownness" on the image
    fuzzy = fuzzy_logic(img_rgb)

    # Setting blob detections parameters
    params = cv2.SimpleBlobDetector_Params()
    params.filterByConvexity=False
    params.filterByColor = False
    params.filterByArea = True
    params.minArea = 20

    # Create a detector object
    detector = cv2.SimpleBlobDetector_create(params)
    # Make detections
    keypoints = detector.detect(fuzzy)
    # Draw a circle around the blob
    blank = np.zeros((1,1))
    im_with_keypoints = cv2.drawKeypoints(read_img, keypoints, blank ,(0,0,255), cv2.DRAW_MATCHES_FLAGS_DRAW_RICH_KEYPOINTS)  


    img_name = os.path.join(output_path, 'og_blob_{}.png'.format(uuid.uuid1()))
    cv2.imwrite(img_name, im_with_keypoints)

"""Call the blob_detection function"""

#blob_detection(IMAGE_PATH, BLOBS_PATH)

#blob_original_image(IMAGE_PATH, BLOB_OUTPUT)

"""**Call the blob_detection function on Train**"""

path = "/content/drive/MyDrive/Agroml/AgroML_Data/Diseases/original_for_blobs/Train"
dest_path = "/content/drive/MyDrive/Agroml/AgroML_Data/Diseases/blobs/Train"

for i in os.listdir(path):
  
    blob_detection(f'{path}/{i}', f'{dest_path}/{i}')

"""**Call the blob_detection function on Val**"""

val_path = "/content/drive/MyDrive/Agroml/AgroML_Data/Diseases/original_for_blobs/Val"
val_dest_path = "/content/drive/MyDrive/Agroml/AgroML_Data/Diseases/blobs/Val"

for i in os.listdir(val_path):
  
    blob_detection(f'{val_path}/{i}', f'{val_dest_path}/{i}')

"""**Check folders count are equal**"""

import glob  
folder1 = glob.glob("/content/drive/MyDrive/Agroml/AgroML_Data/Diseases/blobs/Val/*")
len(folder1)

folder2 = glob.glob("/content/drive/MyDrive/Agroml/AgroML_Data/Diseases/blobs/Train/*")
len(folder2)

import filecmp

def same_folders(dcmp):
    if dcmp.diff_files or dcmp.left_only or dcmp.right_only:
        return False
    for sub_dcmp in dcmp.subdirs.values():
        if not same_folders(sub_dcmp):
            return False
    return True

same_folders(filecmp.dircmp('/content/drive/MyDrive/Agroml/AgroML_Data/Diseases/original_for_blobs/Train', '/content/drive/MyDrive/Agroml/AgroML_Data/Diseases/original/Train'))



"""**copy folders names**"""

# create copy of folders - train

for i in os.listdir("/content/drive/MyDrive/Agroml/AgroML_Data/Diseases/blobs/Val"):

  new_dir = os.path.join(dest_path, i)
  os.makedirs(new_dir)

#!rm -rf '/content/drive/MyDrive/Agroml/AgroML_Data/Diseases/blobs/Train'

"""**Test Algo on single image**"""

read_img = cv2.imread("/content/drive/MyDrive/Agroml/AgroML_Data/Diseases/original/Train/Pepper___bell___Bacterial_spot/42268507-28e9-4fb2-bd74-a2afdb3eebfa___JR_B.Spot 3240_180deg.JPG")
    
img_rgb = cv2.cvtColor(read_img, cv2.COLOR_BGR2RGB)

# Applying Fuzzy Logic for "brownness" on the image
fuzzy = fuzzy_logic(img_rgb)

# Setting blob detections parameters
params = cv2.SimpleBlobDetector_Params()
params.filterByArea = True
params.minArea = 10
#params.filterByCircularity = True
#params.minCircularity = 0.1
#params.filterByInertia = True
#params.maxInertiaRatio = 0.9
params.filterByConvexity=False

# Create a detector object
detector = cv2.SimpleBlobDetector_create(params)
# Make detections
keypoints = detector.detect(fuzzy)
# Draw a circle around the blob
blank = np.zeros((1,1))
im_with_keypoints = cv2.drawKeypoints(read_img, keypoints, blank ,(0,0,255), cv2.DRAW_MATCHES_FLAGS_DRAW_RICH_KEYPOINTS)



cv2_imshow(fuzzy)

cv2_imshow(im_with_keypoints)

keypoints_lst = []

for j in range(len(keypoints)):

  x = keypoints[j].pt[0] #j is the index of the blob you want to get the position
  y = keypoints[j].pt[1]
  keypoints_lst.append(x)
  keypoints_lst.append(y)

keypoints_lst

x_cent = keypoints_lst[0]
x_cent = round(x_cent)
y_cent = keypoints_lst[1]
y_cent = round(y_cent)
diameter = 64 
centroide = [x_cent,  y_cent]

xmin = x_cent-diameter/2
ymin = y_cent-diameter/2
xmax = xmin+ diameter
ymax = ymin+ diameter

im = Image.open("/content/drive/MyDrive/Agroml/AgroML_Data/Diseases/original/Train/Pepper___bell___Bacterial_spot/42268507-28e9-4fb2-bd74-a2afdb3eebfa___JR_B.Spot 3240_180deg.JPG")
im1 = im.crop((xmin, ymin, xmax, ymax))
im1







